
'use client'

import { useEffect, useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Switch } from '@/components/ui/switch'
import { Separator } from '@/components/ui/separator'
import { 
  ArrowLeft,
  Settings,
  Lock,
  Bell,
  Mail,
  Shield,
  Save,
  AlertCircle,
  CheckCircle,
  Phone
} from 'lucide-react'
import Link from 'next/link'
import { NotificationPreferences } from '@/components/notifications/notification-preferences'

interface UserSettings {
  id: string
  name: string
  email: string
  emailNotifications: boolean
  smsNotifications: boolean
  marketingEmails: boolean
  talentProfile?: {
    mpesaPhoneNumber?: string | null
    mpesaVerified?: boolean
  } | null
}

export default function TalentSettings() {
  const [settings, setSettings] = useState<UserSettings | null>(null)
  const [mpesaPhoneNumber, setMpesaPhoneNumber] = useState('')
  const [loading, setLoading] = useState(true)
  const [saving, setSaving] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [success, setSuccess] = useState<string | null>(null)

  // Password change form
  const [passwordForm, setPasswordForm] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  })

  useEffect(() => {
    fetchSettings()
  }, [])

  useEffect(() => {
    if (settings?.talentProfile?.mpesaPhoneNumber) {
      setMpesaPhoneNumber(settings.talentProfile.mpesaPhoneNumber)
    }
  }, [settings])

  const fetchSettings = async () => {
    try {
      setLoading(true)
      const response = await fetch('/api/talent/settings')
      if (!response.ok) {
        throw new Error('Failed to fetch settings')
      }
      const data = await response.json()
      if (data.success) {
        setSettings(data.data)
      } else {
        throw new Error(data.error || 'Failed to fetch settings')
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred')
    } finally {
      setLoading(false)
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setSaving(true)
    setError(null)
    setSuccess(null)

    try {
      // First update the MPESA number if it's changed
      if (mpesaPhoneNumber !== settings?.talentProfile?.mpesaPhoneNumber) {
        const mpesaResponse = await fetch('/api/profile/mpesa', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ mpesaPhoneNumber }),
        })

        if (!mpesaResponse.ok) {
          const errorData = await mpesaResponse.json()
          throw new Error(errorData.error || 'Failed to update MPESA number')
        }
      }

      // Then update the rest of the settings
      const response = await fetch('/api/talent/settings', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          emailNotifications: settings?.emailNotifications,
          smsNotifications: settings?.smsNotifications,
          marketingEmails: settings?.marketingEmails,
        }),
      })

      const data = await response.json()
      if (data.success) {
        setSettings(data.data)
        setSuccess('Settings updated successfully!')
        setTimeout(() => setSuccess(null), 3000)
      } else {
        throw new Error(data.error || 'Failed to update settings')
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to update settings')
      setTimeout(() => setError(null), 5000)
    } finally {
      setSaving(false)
    }
  }

  const changePassword = async (e: React.FormEvent) => {
    e.preventDefault()
    if (passwordForm.newPassword !== passwordForm.confirmPassword) {
      setError('New passwords do not match')
      return
    }

    if (passwordForm.newPassword.length < 6) {
      setError('New password must be at least 6 characters')
      return
    }

    try {
      setSaving(true)
      setError(null)
      setSuccess(null)
      
      const response = await fetch('/api/auth/change-password', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          currentPassword: passwordForm.currentPassword,
          newPassword: passwordForm.newPassword,
        }),
      })

      const data = await response.json()
      
      if (!response.ok) {
        throw new Error(data.error || 'Failed to update password')
      }

      setSuccess('Password updated successfully!')
      setPasswordForm({
        currentPassword: '',
        newPassword: '',
        confirmPassword: ''
      })
      
      setTimeout(() => setSuccess(null), 3000)
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to update password')
      setTimeout(() => setError(null), 5000)
    } finally {
      setSaving(false)
    }
  }

  const updateNotificationSetting = (key: keyof UserSettings, checked: boolean) => {
    if (!settings) return
    
    setSettings({ ...settings, [key]: checked })
    
    // Create a synthetic event for the form submission
    const syntheticEvent = {
      preventDefault: () => {},
      currentTarget: document.createElement('form')
    } as unknown as React.FormEvent
    
    handleSubmit(syntheticEvent)
  }

  if (loading) {
    return (
      <div className="p-6">
        <div className="flex items-center gap-4 mb-6">
          <Link href="/talent" className="inline-flex items-center px-3 py-2 text-sm font-medium rounded-md bg-transparent hover:bg-gray-100">
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Dashboard
          </Link>
        </div>
        <div className="grid gap-6">
          {[...Array(3)].map((_, i) => (
            <Card key={i} className="animate-pulse">
              <CardContent className="p-6">
                <div className="h-4 bg-gray-200 rounded w-1/3 mb-4"></div>
                <div className="space-y-2">
                  <div className="h-3 bg-gray-200 rounded w-full"></div>
                  <div className="h-3 bg-gray-200 rounded w-2/3"></div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    )
  }

  if (!settings) {
    return null
  }

  return (
    <div className="space-y-6 p-6">
      {/* Header */}
      <div className="flex items-center gap-4">
        <Link href="/talent" className="inline-flex items-center px-3 py-2 text-sm font-medium rounded-md bg-transparent hover:bg-gray-100">
          <ArrowLeft className="h-4 w-4 mr-2" />
          Back to Dashboard
        </Link>
      </div>

      <div>
        <h1 className="text-3xl font-bold tracking-tight">Settings</h1>
        <p className="text-muted-foreground">
          Manage your account preferences and security
        </p>
      </div>

      {/* Status Messages */}
      {error && (
        <Card className="border-red-200 bg-red-50">
          <CardContent className="p-4">
            <div className="flex items-center gap-2 text-red-600">
              <AlertCircle className="h-4 w-4" />
              <span className="text-sm">{error}</span>
            </div>
          </CardContent>
        </Card>
      )}

      {success && (
        <Card className="border-green-200 bg-green-50">
          <CardContent className="p-4">
            <div className="flex items-center gap-2 text-green-600">
              <CheckCircle className="h-4 w-4" />
              <span className="text-sm">{success}</span>
            </div>
          </CardContent>
        </Card>
      )}

      <div className="grid gap-6">
        {/* M-PESA Settings */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Phone className="h-5 w-5" />
              M-PESA Payment Settings
            </CardTitle>
            <CardDescription>Update your M-PESA phone number for receiving payments</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="mpesa-phone">M-PESA Phone Number</Label>
              <div className="flex items-center gap-2">
                <Input
                  id="mpesa-phone"
                  type="tel"
                  placeholder="e.g. 254712345678"
                  value={mpesaPhoneNumber}
                  onChange={(e) => setMpesaPhoneNumber(e.target.value)}
                  className="flex-1"
                />
                {settings?.talentProfile?.mpesaVerified ? (
                  <span className="inline-flex items-center px-3 py-2 text-sm text-green-600 bg-green-50 rounded-md">
                    <CheckCircle className="w-4 h-4 mr-1" /> Verified
                  </span>
                ) : (
                  <span className="inline-flex items-center px-3 py-2 text-sm text-yellow-600 bg-yellow-50 rounded-md">
                    <AlertCircle className="w-4 h-4 mr-1" /> Unverified
                  </span>
                )}
              </div>
              <p className="text-xs text-muted-foreground mt-1">
                Enter your M-PESA registered phone number for receiving payments
              </p>
            </div>
            <Button 
              onClick={handleSubmit} 
              disabled={saving || mpesaPhoneNumber === settings?.talentProfile?.mpesaPhoneNumber}
              className="mt-2"
            >
              {saving ? 'Saving...' : 'Update M-PESA Number'}
            </Button>
          </CardContent>
        </Card>

        <div className="grid gap-6 lg:grid-cols-2">
          {/* Identity Verification */}
          <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Shield className="h-5 w-5" />
              Identity Verification
            </CardTitle>
            <CardDescription>Verify your identity to enable payouts and build trust</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="text-sm text-muted-foreground">
              Complete KYC verification to:
            </div>
            <ul className="text-sm space-y-1 text-muted-foreground ml-4">
              <li>• Receive payouts to your M-Pesa account</li>
              <li>• Display verified badge on your profile</li>
              <li>• Build trust with event organizers</li>
              <li>• Access all platform features</li>
            </ul>
            <Button asChild className="w-full">
              <Link href="/talent/settings/verification">
                <Shield className="h-4 w-4 mr-2" />
                Manage Verification
              </Link>
            </Button>
          </CardContent>
        </Card>

        {/* Security Settings */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Lock className="h-5 w-5" />
              Security
            </CardTitle>
            <CardDescription>Change your password and security settings</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="current-password">Current Password</Label>
              <Input
                id="current-password"
                type="password"
                value={passwordForm.currentPassword}
                onChange={(e) => setPasswordForm(prev => ({ ...prev, currentPassword: e.target.value }))}
                placeholder="Enter current password"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="new-password">New Password</Label>
              <Input
                id="new-password"
                type="password"
                value={passwordForm.newPassword}
                onChange={(e) => setPasswordForm(prev => ({ ...prev, newPassword: e.target.value }))}
                placeholder="Enter new password"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="confirm-password">Confirm New Password</Label>
              <Input
                id="confirm-password"
                type="password"
                value={passwordForm.confirmPassword}
                onChange={(e) => setPasswordForm(prev => ({ ...prev, confirmPassword: e.target.value }))}
                placeholder="Confirm new password"
              />
            </div>

            <Button 
              onClick={changePassword} 
              disabled={saving || !passwordForm.currentPassword || !passwordForm.newPassword}
              className="w-full"
            >
              <Save className="h-4 w-4 mr-2" />
              {saving ? 'Updating...' : 'Change Password'}
            </Button>
          </CardContent>
        </Card>

        {/* Basic Notification Settings */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Bell className="h-5 w-5" />
              Basic Notifications
            </CardTitle>
            <CardDescription>General notification preferences</CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <div className="flex items-center gap-2">
                  <Mail className="h-4 w-4 text-muted-foreground" />
                  <Label htmlFor="email-notifications">Email Notifications</Label>
                </div>
                <p className="text-sm text-muted-foreground pl-6">
                  Global email notification setting (legacy)
                </p>
              </div>
              <Switch
                id="email-notifications"
                checked={settings.emailNotifications}
                onCheckedChange={(checked: boolean) => updateNotificationSetting('emailNotifications', checked)}
              />
            </div>

            <Separator />

            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <div className="flex items-center gap-2">
                  <Mail className="h-4 w-4 text-muted-foreground" />
                  <Label htmlFor="marketing-emails">Marketing Emails</Label>
                </div>
                <p className="text-sm text-muted-foreground pl-6">
                  Receive tips, platform updates, and promotional content
                </p>
              </div>
              <Switch
                id="marketing-emails"
                checked={settings.marketingEmails}
                onCheckedChange={(checked: boolean) => updateNotificationSetting('marketingEmails', checked)}
              />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Advanced Email Notification Preferences */}
      <NotificationPreferences />

      {/* Account Information */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Settings className="h-5 w-5" />
            Account Information
          </CardTitle>
          <CardDescription>Your basic account details</CardDescription>
        </CardHeader>
        <CardContent className="grid gap-4 md:grid-cols-2">
          <div className="space-y-2">
            <Label>Full Name</Label>
            <Input value={settings.name} disabled className="bg-muted" />
          </div>
          <div className="space-y-2">
            <Label>Email Address</Label>
            <Input value={settings.email} disabled className="bg-muted" />
          </div>
        </CardContent>
        <CardContent className="pt-0">
          <p className="text-sm text-muted-foreground">
            To change your name or email, please contact support.
          </p>
        </CardContent>
      </Card>

      {/* Danger Zone */}
      <Card className="border-red-200">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-red-600">
            <Shield className="h-5 w-5" />
            Danger Zone
          </CardTitle>
          <CardDescription>Irreversible account actions</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="bg-red-50 p-4 rounded-lg">
            <h4 className="font-medium text-red-800 mb-2">Account Deactivation</h4>
            <p className="text-sm text-red-700 mb-4">
              Deactivating your account will disable your profile and prevent new bookings. 
              Existing bookings will be honored.
            </p>
            <Button className="bg-red-600 hover:bg-red-700 text-white" disabled>
              Deactivate Account
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
