
version: '3.8'

services:
  # PostgreSQL Database Service
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    container_name: gigsecure-postgres
    environment:
      POSTGRES_DB: gigsecure
      POSTGRES_USER: gigsecure_user
      POSTGRES_PASSWORD: gigsecure_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gigsecure_user -d gigsecure"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gigsecure-network

  # Next.js Application Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    restart: unless-stopped
    container_name: gigsecure-app
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://gigsecure_user:gigsecure_password@postgres:5432/gigsecure
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=your-production-nextauth-secret-here
      - PAYSTACK_SECRET_KEY=your-paystack-secret-key
      - PAYSTACK_PUBLIC_KEY=your-paystack-public-key

      - CRON_SECRET=your-cron-secret-key
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USER=your-email@gmail.com
      - SMTP_PASSWORD=your-email-password
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - app_uploads:/app/uploads
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - gigsecure-network

  # Redis Service for Socket.IO and Caching (Optional but recommended for production)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    container_name: gigsecure-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - gigsecure-network

volumes:
  postgres_data:
    driver: local
  app_uploads:
    driver: local
  redis_data:
    driver: local

networks:
  gigsecure-network:
    driver: bridge
