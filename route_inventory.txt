=== STEP 1: INVENTORY OF REDUNDANT ROUTES AND REFERENCES ===

1. Finding redundant route directories:
app/profiles/talent
app/profiles/talent/[id]
app/profiles/talent/[id]/_components

2. Finding all profile-related route files:
app/talent/messages/page.tsx
app/talent/bookings/page.tsx
app/talent/bookings/[id]/review/page.tsx
app/talent/bookings/[id]/page.tsx
app/talent/page.tsx
app/talent/notifications/page.tsx
app/talent/referrals/page.tsx
app/talent/mpesa/page.tsx
app/talent/disputes/page.tsx
app/talent/disputes/[id]/page.tsx
app/talent/settings/page.tsx
app/talent/settings/verification/page.tsx
app/talent/profile/page.tsx
app/talent/events/page.tsx
app/talent/reviews/page.tsx
app/talent/payouts/page.tsx
app/talent/[id]/page.tsx
app/talent/[id]/_components/talent-profile-view.tsx
app/talent/[id]/layout.tsx
app/talent/availability/page.tsx
app/talent/layout.tsx
app/talent/earnings/page.tsx
app/talent/packages/page.tsx
app/talent/packages/new/page.tsx
app/talent/packages/[id]/edit/page.tsx
app/profiles/talent/[id]/page.tsx
app/profiles/talent/[id]/_components/talent-profile-view.tsx
app/api/dashboard/talent/route.ts
app/api/talent/epk/upload/route.ts
app/api/talent/messages/route.ts
app/api/talent/bookings/route.ts
app/api/talent/bookings/[id]/route.ts
app/api/talent/bookings/[id]/review/route.ts
app/api/talent/settings/route.ts
app/api/talent/profile/route.ts
app/api/talent/reviews/route.ts
app/api/talent/[id]/profile/route.ts
app/api/talent/available-events/route.ts
app/api/talent/availability/route.ts
app/api/talent/availability/[id]/route.ts
app/api/talent/applications/route.ts
app/api/talent/earnings/route.ts
app/api/talent/packages/route.ts
app/api/talent/packages/[id]/route.ts
app/api/talent/packages/[id]/duplicate/route.ts
app/api/top-talents/route.ts
app/api/talents/route.ts
app/api/talents/search/route.ts
app/api/talents/[id]/route.ts

3. Finding files containing /profiles/talent/ references:
app/page.tsx
app/organizer/events/[id]/page.tsx
app/admin/users/page.tsx
components/dashboard/sidebar.tsx

4. Finding files containing profiles.*talent references:
app/page.tsx
app/organizer/events/[id]/page.tsx
app/admin/users/page.tsx
app/admin/settings/page.tsx
app/dispute-policy/page.tsx
components/dashboard/sidebar.tsx
=== EXAMINING REDUNDANT ROUTE FILES ===

Contents of app/profiles/talent/[id]/page.tsx:

import { notFound } from 'next/navigation'
import { prisma } from '@/lib/db'
import { UserRole, VerificationStatus } from '@prisma/client'
import { TalentProfileView } from './_components/talent-profile-view'

export const dynamic = 'force-dynamic'

interface PageProps {
  params: { id: string }
}

async function getTalentProfile(id: string) {
  try {
    // Try to find talent by ID first, then by username if not found
    const talent = await prisma.talentProfile.findFirst({
      where: {
        OR: [
          { id: id },
          { username: id },
          { userId: id }
        ],
        User: {
          role: UserRole.TALENT,
          isActive: true,
          isEmailVerified: true
        }
      },
      include: {
        User: {
          select: {
            id: true,
            name: true,
            email: true,
            image: true,
            createdAt: true,
            verificationStatus: true
          }
        },
        File: {
          orderBy: {
            createdAt: 'desc'
          }
        },
        Package: {
          where: {
            isPublished: true,
            isActive: true
          },
          orderBy: [
            { bookingCount: 'desc' },
            { updatedAt: 'desc' }
          ]
        },
        BankAccount: {
          select: {
            isVerified: true
          }
        }
      }
    })

    if (!talent) {
      return null
    }

    // Increment profile views
    await prisma.talentProfile.update({
      where: { id: talent.id },
      data: { profileViews: { increment: 1 } }
    })

    // Get reviews for this talent
    const reviews = await prisma.review.findMany({
      where: {
        receiverId: talent.userId,
        isVisible: true
      },
      include: {
        User_Review_giverIdToUser: {
          select: {
            id: true,
            name: true,
            image: true
          }
        },
        Booking: {
          select: {
            id: true,
            createdAt: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      },
      take: 10 // Limit to recent 10 reviews
    })

    // Parse social links safely
    let socialLinks = {}
    try {
      if (talent.socialLinks && typeof talent.socialLinks === 'object') {
        socialLinks = talent.socialLinks as Record<string, string>
      }
    } catch (error) {
      console.error('Error parsing social links:', error)
    }

    // Transform the data for public consumption
    return {
      id: talent.id,
      userId: talent.userId,
      username: talent.username,
      name: talent.User?.name || 'Professional Talent',
      bio: talent.bio,
      tagline: talent.tagline,
      location: talent.location,
      website: talent.website,
      category: talent.category,
      skills: talent.skills || [],
      experience: talent.experience,
      hourlyRate: talent.hourlyRate ? parseFloat(talent.hourlyRate.toString()) : null,
      availability: talent.availability,
      averageRating: talent.averageRating ? parseFloat(talent.averageRating.toString()) : 0,
      totalReviews: talent.totalReviews || 0,
      totalBookings: talent.totalBookings || 0,
      profileViews: talent.profileViews || 0,
      socialLinks,
      epkUrl: talent.epkUrl,
      pastClients: talent.pastClients || [],
      verified: talent.User?.verificationStatus === VerificationStatus.VERIFIED,
      memberSince: talent.User?.createdAt?.toISOString(),
      image: talent.User?.image,
      portfolioItems: talent.File?.map(item => ({
        id: item.id,
        filename: item.filename,
        originalName: item.originalName,
        mimeType: item.mimeType,
        url: item.url,
        createdAt: item.createdAt.toISOString()
      })) || [],
      packages: talent.Package?.map(pkg => ({
        id: pkg.id,
        title: pkg.title,
        description: pkg.description,
        category: pkg.category,
        location: pkg.location,
        price: parseFloat(pkg.price.toString()),
        priceIsHidden: pkg.priceIsHidden,
        duration: pkg.duration,
        features: pkg.features || [],
        coverImageUrl: pkg.coverImageUrl,
        images: pkg.images || [],
        viewCount: pkg.viewCount,
        inquiryCount: pkg.inquiryCount,
        bookingCount: pkg.bookingCount,
        createdAt: pkg.createdAt.toISOString(),
        updatedAt: pkg.updatedAt.toISOString()
      })) || [],
      reviews: reviews?.map(review => ({
        id: review.id,
        rating: review.rating,
        comment: review.comment,
        reviewerType: review.reviewerType,
        createdAt: review.createdAt.toISOString(),
        reviewer: {
          name: review.User_Review_giverIdToUser?.name || 'Anonymous',
          image: review.User_Review_giverIdToUser?.image
        },
        booking: {
          id: review.Booking?.id || '',
          date: review.Booking?.createdAt.toISOString() || ''
        }
      })) || []
    }
  } catch (error) {
    console.error('Error fetching talent profile:', error)
    return null
  }
}

export default async function TalentProfilePage({ params }: PageProps) {
  const profile = await getTalentProfile(params.id)
  
  if (!profile) {
    notFound()
  }

  return <TalentProfileView profile={profile} />
}

export async function generateMetadata({ params }: PageProps) {
  const profile = await getTalentProfile(params.id)
  
  if (!profile) {
    return {
      title: 'Talent Not Found',
      description: 'The requested talent profile could not be found.'
    }
  }

  return {
    title: `${profile.name} - ${profile.category || 'Professional Talent'} | GigSecure`,
    description: profile.tagline || profile.bio || `Professional ${profile.category || 'talent'} based in ${profile.location || 'Kenya'}.`,
    openGraph: {
      title: `${profile.name} - ${profile.category || 'Professional Talent'}`,
      description: profile.tagline || profile.bio || `Professional ${profile.category || 'talent'} based in ${profile.location || 'Kenya'}.`,
      images: profile.image ? [{ url: profile.image }] : [],
      type: 'profile',
    },
    twitter: {
      card: 'summary_large_image',
      title: `${profile.name} - ${profile.category || 'Professional Talent'}`,
      description: profile.tagline || profile.bio || `Professional ${profile.category || 'talent'} based in ${profile.location || 'Kenya'}.`,
      images: profile.image ? [profile.image] : [],
    }
  }
}

Contents of app/talent/[id]/page.tsx:


import { notFound } from 'next/navigation'
import { prisma } from '@/lib/db'
import { UserRole, VerificationStatus } from '@prisma/client'
import { TalentProfileView } from './_components/talent-profile-view'

export const dynamic = 'force-dynamic'

interface PageProps {
  params: { id: string }
}

interface PortfolioItem {
  id: string
  filename: string
  originalName: string
  mimeType: string
  url: string
  createdAt: Date
}

interface PackageItem {
  id: string
  title: string
  description: string
  category: string
  location: string | null
  price: any
  priceIsHidden: boolean
  duration: string | null
  features: string[]
  coverImageUrl: string | null
  images: string[]
  viewCount: number
  inquiryCount: number
  bookingCount: number
  createdAt: Date
  updatedAt: Date
}

interface ReviewItem {
  id: string
  rating: number
  comment: string
  reviewerType: any
  createdAt: Date
  User_Review_giverIdToUser: {
    id: string
    name: string | null
    image: string | null
  }
  Booking: {
    id: string
    createdAt: Date
  }
}

async function getTalentProfile(id: string) {
  try {
    // Try to find talent by ID first, then by username if not found
    const talent = await prisma.talentProfile.findFirst({
      where: {
        OR: [
          { id: id },
          { username: id },
          { userId: id }
        ],
        User: {
          role: UserRole.TALENT,
          isActive: true,
          isEmailVerified: true
        }
      },
      include: {
        User: {
          select: {
            id: true,
            name: true,
            email: true,
            image: true,
            createdAt: true,
            verificationStatus: true
          }
        },
        File: {
          orderBy: {
            createdAt: 'desc'
          }
        },
        Package: {
          where: {
            isPublished: true,
            isActive: true
          },
          orderBy: [
            { bookingCount: 'desc' },
            { updatedAt: 'desc' }
          ]
        },
        BankAccount: {
          select: {
            isVerified: true
          }
        }
      }
    })

    if (!talent) {
      return null
    }

    // Increment profile views
    await prisma.talentProfile.update({
      where: { id: talent.id },
      data: { profileViews: { increment: 1 } }
    })

    // Get reviews for this talent
    const reviews = await prisma.review.findMany({
      where: {
        receiverId: talent.userId,
        isVisible: true
      },
      include: {
        User_Review_giverIdToUser: {
          select: {
            id: true,
            name: true,
            image: true
          }
        },
        Booking: {
          select: {
            id: true,
            createdAt: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      },
      take: 10 // Limit to recent 10 reviews
    })

    // Parse social links safely
    let socialLinks = {}
    try {
      if (talent.socialLinks && typeof talent.socialLinks === 'object') {
        socialLinks = talent.socialLinks as Record<string, string>
      }
    } catch (error) {
      console.error('Error parsing social links:', error)
    }

    // Transform the data for public consumption
    return {
      id: talent.id,
      userId: talent.userId,
      username: talent.username,
      name: talent.User?.name || 'Professional Talent',
      bio: talent.bio,
      tagline: talent.tagline,
      location: talent.location,
      website: talent.website,
      category: talent.category,
      skills: talent.skills || [],
      experience: talent.experience,
      hourlyRate: talent.hourlyRate ? parseFloat(talent.hourlyRate.toString()) : null,
      availability: talent.availability,
      averageRating: talent.averageRating ? parseFloat(talent.averageRating.toString()) : 0,
      totalReviews: talent.totalReviews || 0,
      totalBookings: talent.totalBookings || 0,
      profileViews: talent.profileViews || 0,
      socialLinks,
      epkUrl: talent.epkUrl,
      pastClients: talent.pastClients || [],
      verified: talent.User?.verificationStatus === VerificationStatus.VERIFIED,
      memberSince: talent.User?.createdAt?.toISOString(),
      image: talent.User?.image,
      portfolioItems: talent.File?.map((item: PortfolioItem) => ({
        id: item.id,
        filename: item.filename,
        originalName: item.originalName,
        mimeType: item.mimeType,
        url: item.url,
        createdAt: item.createdAt.toISOString()
      })) || [],
      packages: talent.Package?.map((pkg: PackageItem) => ({
        id: pkg.id,
        title: pkg.title,
        description: pkg.description,
        category: pkg.category,
        location: pkg.location,
        price: parseFloat(pkg.price.toString()),
        priceIsHidden: pkg.priceIsHidden,
        duration: pkg.duration,
        features: pkg.features || [],
        coverImageUrl: pkg.coverImageUrl,
        images: pkg.images || [],
        viewCount: pkg.viewCount,
        inquiryCount: pkg.inquiryCount,
        bookingCount: pkg.bookingCount,
        createdAt: pkg.createdAt.toISOString(),
        updatedAt: pkg.updatedAt.toISOString()
      })) || [],
      reviews: reviews?.map((review: ReviewItem) => ({
        id: review.id,
        rating: review.rating,
        comment: review.comment,
        reviewerType: review.reviewerType,
        createdAt: review.createdAt.toISOString(),
        reviewer: {
          name: review.User_Review_giverIdToUser?.name || 'Anonymous',
          image: review.User_Review_giverIdToUser?.image
        },
        booking: {
          id: review.Booking?.id || '',
          date: review.Booking?.createdAt.toISOString() || ''
        }
      })) || []
    }
  } catch (error) {
    console.error('Error fetching talent profile:', error)
    return null
  }
}

export default async function TalentProfilePage({ params }: PageProps) {
  const profile = await getTalentProfile(params.id)
  
  if (!profile) {
    notFound()
  }

  return <TalentProfileView profile={profile} />
}

export async function generateMetadata({ params }: PageProps) {
  const profile = await getTalentProfile(params.id)
  
  if (!profile) {
    return {
      title: 'Talent Not Found',
      description: 'The requested talent profile could not be found.'
    }
  }

  return {
    title: `${profile.name} - ${profile.category || 'Professional Talent'} | GigSecure`,
    description: profile.tagline || profile.bio || `Professional ${profile.category || 'talent'} based in ${profile.location || 'Kenya'}.`,
    openGraph: {
      title: `${profile.name} - ${profile.category || 'Professional Talent'}`,
      description: profile.tagline || profile.bio || `Professional ${profile.category || 'talent'} based in ${profile.location || 'Kenya'}.`,
      images: profile.image ? [{ url: profile.image }] : [],
      type: 'profile',
    },
    twitter: {
      card: 'summary_large_image',
      title: `${profile.name} - ${profile.category || 'Professional Talent'}`,
      description: profile.tagline || profile.bio || `Professional ${profile.category || 'talent'} based in ${profile.location || 'Kenya'}.`,
      images: profile.image ? [profile.image] : [],
    }
  }
}

Comparing the two profile component files:
app/profiles/talent/[id]/_components/talent-profile-view.tsx vs app/talent/[id]/_components/talent-profile-view.tsx
6d5
< import { useRouter } from 'next/navigation'
8a8
> import { useRouter } from 'next/navigation'
15d14
< import { GigSecureLogo } from '@/components/gigsecure-logo'
16a16
> import { GigSecureLogo } from '@/components/gigsecure-logo'
133a134,170
>   // Booking handlers
>   const handleBookingRequest = () => {
>     if (!isAuthenticated) {
>       router.push('/auth/login?callbackUrl=' + encodeURIComponent(window.location.href))
>       return
>     }
>     
>     // Open modal for all authenticated users
>     setIsBookingModalOpen(true)
>   }
> 
>   const handlePackageBooking = (packageId: string) => {
>     if (!isAuthenticated) {
>       router.push('/auth/login?callbackUrl=' + encodeURIComponent(window.location.href))
>       return
>     }
>     
>     if (isTalent && !isProfileOwner) {
>       // Talents cannot book other talents - modal will show this restriction
>       setSelectedPackageId(null)
>       setIsBookingModalOpen(true)
>       return
>     }
>     
>     // Pre-select the package in the modal for all other authenticated users
>     setSelectedPackageId(packageId)
>     setIsBookingModalOpen(true)
>   }
> 
>   const handleViewPackageDetails = (packageId: string) => {
>     router.push(`/packages/${packageId}`)
>   }
> 
>   const handleSignupRedirect = () => {
>     router.push('/auth/signup?callbackUrl=' + encodeURIComponent(window.location.href))
>   }
> 
167,199d203
<   // Booking handler functions
<   const handleBookingRequest = () => {
<     if (!isAuthenticated) {
<       router.push('/auth/login?callbackUrl=' + encodeURIComponent(window.location.href))
<       return
<     }
<     
<     // Open modal for all authenticated users
<     setIsBookingModalOpen(true)
<   }
< 
<   const handlePackageBooking = (packageId: string) => {
<     if (!isAuthenticated) {
<       router.push('/auth/login?callbackUrl=' + encodeURIComponent(window.location.href))
<       return
<     }
<     
<     if (isTalent && !isProfileOwner) {
<       // Talents cannot book other talents - modal will show this restriction
<       setSelectedPackageId(null)
<       setIsBookingModalOpen(true)
<       return
<     }
<     
<     // Pre-select the package in the modal for all other authenticated users
<     setSelectedPackageId(packageId)
<     setIsBookingModalOpen(true)
<   }
< 
<   const handleSignupRedirect = () => {
<     router.push('/auth/signup?callbackUrl=' + encodeURIComponent(window.location.href))
<   }
< 
452c456,460
<                                 <Button size="sm" variant="outline">
---
>                                 <Button 
>                                   size="sm" 
>                                   variant="outline"
>                                   onClick={() => handleViewPackageDetails(pkg.id)}
>                                 >
463,468c471,488
<                                   <Button 
<                                     size="sm"
<                                     onClick={() => handlePackageBooking(pkg.id)}
<                                   >
<                                     Book Package
<                                   </Button>
---
>                                   <>
>                                     {isTalent ? (
>                                       <Button 
>                                         size="sm" 
>                                         variant="outline"
>                                         disabled
>                                       >
>                                         Cannot Book
>                                       </Button>
>                                     ) : (
>                                       <Button 
>                                         size="sm"
>                                         onClick={() => handlePackageBooking(pkg.id)}
>                                       >
>                                         Book Package
>                                       </Button>
>                                     )}
>                                   </>
657,668c677,693
<                     <Button 
<                       className="w-full" 
<                       size="lg"
<                       onClick={handleBookingRequest}
<                     >
<                       <MessageSquare className="h-4 w-4 mr-2" />
<                       Request to Book
<                     </Button>
<                   ) : (
<                     <div className="space-y-3">
<                       <Button className="w-full" size="lg" asChild>
<                         <Link href="/auth/signup">
---
>                     <>
>                       {isTalent ? (
>                         <Button 
>                           className="w-full" 
>                           size="lg" 
>                           variant="outline"
>                           disabled
>                         >
>                           <MessageSquare className="h-4 w-4 mr-2" />
>                           Talents Cannot Book
>                         </Button>
>                       ) : (
>                         <Button 
>                           className="w-full" 
>                           size="lg"
>                           onClick={handleBookingRequest}
>                         >
671c696,707
<                         </Link>
---
>                         </Button>
>                       )}
>                     </>
>                   ) : (
>                     <div className="space-y-3">
>                       <Button 
>                         className="w-full" 
>                         size="lg"
>                         onClick={handleSignupRedirect}
>                       >
>                         <MessageSquare className="h-4 w-4 mr-2" />
>                         Request to Book
674c710
<                         Sign up to contact this talent
---
>                         Sign up to send booking requests
Files are different or one doesn't exist

=== SPECIFIC REFERENCES TO UPDATE ===

Files with /profiles/talent/ references:
--- app/page.tsx ---
679:                          <Link href={`/profiles/talent/${talent.id}`}>
698:                      <Link href={`/profiles/talent/${talent.id}`}>
865:                                href={`/profiles/talent/${pkg?.provider?.id}`}
888:                            onClick={() => router.push(`/profiles/talent/${pkg?.provider?.id}`)}

--- app/organizer/events/[id]/page.tsx ---
185:                      <Link href={`/profiles/talent/${talent.id}`}>View Profile</Link>

--- app/admin/users/page.tsx ---
670:                                        <DropdownMenuItem onClick={() => window.open(`/profiles/talent/${user.id}`, '_blank')}>

--- components/dashboard/sidebar.tsx ---
77:      { href: `/profiles/talent/${userId}`, title: 'My Public Profile', icon: Globe },

